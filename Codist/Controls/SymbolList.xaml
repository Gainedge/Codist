<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:c="clr-namespace:Codist.Controls;assembly=Codist"
	xmlns:vsp="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0">
	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="VirtualList.xaml"/>
	</ResourceDictionary.MergedDictionaries>
	<c:SymbolItemTemplateSelector x:Key="symbolTemplateSelector"/>
	<Style TargetType="{x:Type c:SymbolList}" BasedOn="{StaticResource {x:Type c:VirtualList}}">
		<Setter Property="ItemTemplateSelector" Value="{StaticResource symbolTemplateSelector}"/>
	</Style>
	<Style TargetType="{x:Type c:SymbolMenu}" BasedOn="{StaticResource {x:Type c:SymbolList}}"/>
	<Style TargetType="ListBoxItem">
		<Setter Property="OverridesDefaultStyle" Value="True"/>
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="Cursor" Value="Arrow"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ListBoxItem">
					<ContentPresenter
						ContentTemplateSelector="{StaticResource symbolTemplateSelector}"
						ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" 
						HorizontalAlignment="Stretch" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" SnapsToDevicePixels="False" Height="22" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="ListBoxItemTemplate" TargetType="ListBoxItem">
		<ContentPresenter
			ContentTemplateSelector="{StaticResource symbolTemplateSelector}"
			ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" 
			HorizontalAlignment="Stretch" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" SnapsToDevicePixels="False" Height="22" />
	</ControlTemplate>
	<DataTemplate x:Key="LabelTemplate" DataType="{x:Type c:SymbolItem}">
		<Border Name="Border" BorderThickness="0,0,0,1" Padding="5,1,1,1" HorizontalAlignment="Stretch" Background="{DynamicResource VsBrush.CommandBarMenuBackgroundGradient}" BorderBrush="{DynamicResource VsBrush.CommandBarMenuSeparator}">
			<ContentPresenter MaxWidth="500" Grid.Column="1" HorizontalAlignment="Right" VerticalAlignment="Center" Content="{Binding Path=Content}" RecognizesAccessKey="False" />
		</Border>
	</DataTemplate>
	<DataTemplate x:Key="SymbolItemTemplate" DataType="{x:Type c:SymbolItem}">
		<Border Name="Border" BorderThickness="1" Padding="1" HorizontalAlignment="Stretch" Background="{DynamicResource VsBrush.CommandBarMenuBackgroundGradient}" BorderBrush="{DynamicResource VsBrush.CommandBarMenuBackgroundGradient}">
			<Grid>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
					<ColumnDefinition Width="*"/>
					<ColumnDefinition Width="Auto"/>
					<ColumnDefinition Width="Auto"/>
				</Grid.ColumnDefinitions>
				<ContentPresenter x:Name="Icon" Width="18" Height="18" Margin="0,0,8,0" VerticalAlignment="Center" Content="{Binding Path=Icon}"/>
				<Border x:Name="Check" Width="18" Height="18" Visibility="Collapsed" Margin="6,0,6,0" Background="{DynamicResource VsBrush.CommandBarMenuBackgroundGradient}" BorderThickness="1" BorderBrush="#5082a4">
					<Path x:Name="CheckMark" Width="7" Height="7" Visibility="Hidden" SnapsToDevicePixels="False" Stroke="#5082a4" StrokeThickness="2" Data="M 0 0 L 7 7 M 0 7 L 7 0"/>
				</Border>
				<ContentPresenter x:Name="HeaderHost" MaxWidth="500" Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Center" Content="{Binding Path=Content}" RecognizesAccessKey="False"/>
				<TextBlock x:Name="HintText" Grid.Column="2" Text="{Binding Path=Hint}" Margin="5,0,0,0" Height="{Binding ElementName=HeaderHost,Path=ActualHeight}" VerticalAlignment="Center" HorizontalAlignment="Right" Foreground="{DynamicResource VsBrush.GrayText}" MaxWidth="200" TextTrimming="CharacterEllipsis"/>
				<ContentPresenter x:Name="ExtIcon" Grid.Column="3" Width="Auto" Height="18" Margin="8,0,0,0" VerticalAlignment="Center" Content="{Binding Path=ExtIcon}"/>
			</Grid>
		</Border>
		<DataTemplate.Triggers>
			<DataTrigger Binding="{Binding Icon}" Value="{x:Null}">
				<Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
			</DataTrigger>
			<DataTrigger Binding="{Binding ExtIcon}" Value="{x:Null}">
				<Setter TargetName="ExtIcon" Property="Visibility" Value="Collapsed"/>
			</DataTrigger>
			<DataTrigger Binding="{Binding ImageId}" Value="2099"><!-- for regions -->
				<Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static vsp:EnvironmentColors.PanelTitleBarBrushKey}}"/>
				<Setter TargetName="HeaderHost" Property="TextBlock.FontWeight" Value="Bold"/>
			</DataTrigger>
			<DataTrigger Binding="{Binding Usage}" Value="Container">
				<Setter TargetName="HeaderHost" Property="HorizontalAlignment" Value="Center"/>
				<Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static vsp:EnvironmentColors.PanelTitleBarUnselectedBrushKey}}"/>
			</DataTrigger>
			<DataTrigger Binding="{Binding IsExternal}" Value="True">
				<Setter TargetName="Border" Property="Opacity" Value="0.8"/>
			</DataTrigger>
			<Trigger Property="UIElement.IsMouseOver" Value="True">
				<Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static vsp:EnvironmentColors.CommandBarMenuItemMouseOverBrushKey}}"/>
				<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource VsBrush.CommandBarHoverOverSelectedIconBorder}"/>
			</Trigger>
			<DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True">
				<Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static vsp:EnvironmentColors.CommandBarMenuItemMouseOverBrushKey}}"/>
			</DataTrigger>
			<Trigger Property="UIElement.IsEnabled" Value="False">
				<Setter TargetName="Border" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
			</Trigger>
		</DataTemplate.Triggers>
	</DataTemplate>
</ResourceDictionary>
